@inject GameState State
<HeadContent>
    <style>
        :root {
            --board-bg: @BoardColor; /* Använd parametern för brädfärg */
            --player1: @Player1Color; /* Använd parametern för färgen för spelare 1 */
            --player2: @Player2Color; /* Använd parametern för färgen för spelare 2 */
        }
    </style>
</HeadContent>
<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button> <br />
    <span class="alert-danger">@errorMessage</span> <span class="alert-info">@CurrentTurn</span>
</article>
<nav>
    @for(byte i = 0; i<7;i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="()=> PlayPiece(col)">🔽</span>
    }
</nav>

<div>
    <div class="board">
        @for (var i = 0; i<42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i<42; i++)
    {
        <span class="@pieces[i]"> </span>
    }
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty; 
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch(ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player One Wins!",
            GameState.WinState.Player2_Wins => "Player Two Wins!",
            GameState.WinState.Tie => "It's a TIE!",
            _ => ""
        };
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    //Uppgift gör om root fägerna till parametrar
     private string BoardColor    = "#5e239d"; // Default board color: lila
     private string Player1Color  = "#00f0b5"; // Default color - player 1: green
     private string Player2Color  = "#f61067"; // Default color -  player 2: rosa

}
